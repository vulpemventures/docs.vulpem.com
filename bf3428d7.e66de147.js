(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{84:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return s})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return l}));var a=t(3),r=t(7),i=(t(0),t(90)),o={id:"transaction",title:"Transaction",image:"/img/marina_logo.svg"},s={unversionedId:"marina/transaction",id:"marina/transaction",isDocsHomePage:!1,title:"Transaction",description:"Send to an address",source:"@site/docs/marina/transaction.md",slug:"/marina/transaction",permalink:"/marina/transaction",editUrl:"https://github.com/vulpemventures/docs.vulpem.com/edit/master/docs/docs/marina/transaction.md",version:"current",sidebar:"docs",previous:{title:"Display Balances",permalink:"/marina/balances"},next:{title:"API reference",permalink:"/marina/api"}},c=[{value:"Send to an address",id:"send-to-an-address",children:[]},{value:"Custom transaction",id:"custom-transaction",children:[]}],d={toc:c};function l(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},d,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"send-to-an-address"},"Send to an address"),Object(i.b)("p",null,"You can delegate Marina to create, fund, blind, sign and broadcast a Liquid transaction to a recipient. You do not need to know anything about current balance, although is suggested to retrieve and display the ",Object(i.b)("a",{parentName:"p",href:"/marina/balances"},"balances")," in your application for better UX and to check beforehand for sufficient funds."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},'// Send 0.007 LBTC to an address\nconst { txid, hex } = await window.marina.sendTransaction(\n  [\n    {\n      address: "el1qq2c6wq4qr32vgnd5zz9kc3a9n5ancmwak66zt35vvxa7hyemqw773mtlp8z0mmwm6y5tfcq53qv5y9rfq83kqfwwquxvepy6g", // the address of the recipient\n      asset: "5ac9f65c0efcc4775e0baec4ec03abdde22473cd3cf33c0419ca290e0751b225", // the asset to send\n      value: 700000 // amount always expressed in satoshis\n    }\n  ],\n);\n\nconsole.log(txid, hex);\n')),Object(i.b)("p",null,"This will prompt the user to allow blinding & signing a transaction."),Object(i.b)("img",{src:"/img/marina_spend.png",alt:"Marina Spend",width:"300"}),Object(i.b)("p",null,"If the prompt is accepted, the transaction will be blinded, signed and broadcasted."),Object(i.b)("h2",{id:"custom-transaction"},"Custom transaction"),Object(i.b)("p",null,"Developers can build custom transactions using the unspents of the exposed addresses and can delegate Marina to sign with the user consent."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"import { Psbt, networks, BlindingDataLike } from 'liquidjs-lib';\n\n// Empty psbt elements\nconst psbt = new liquid.Psbt({ network: networks.regtest });\n\n// Add inputs got from marina and outputs\npsbt.addInput({\n  //...\n});\npsbt.addOutput({\n  // ...\n});\n\n\n// Let's blind all the outputs. The order is important (same of output and some blinding key)\n// The marina blinding private key is an hex string, we need to pass to Buffer.\nawait psbt.blindOutputs(\n  Psbt.ECCKeysGenerator(ecc),\n  [\n    Buffer.from(blindingPrivateKeyOfMarinaInput, 'hex')\n  ],\n  [\n    blindingPublicKeyOfMarinaChangeAddress,\n    blindingPublicKeyOfRecipientAddress,\n  ]\n);\n\n// encode to base64\nconst encodedTx = psbt.toBase64();\n\n// now you can sign with Marina\nconst signedTx = await window.marina.signTransaction(encodedTx);\n")),Object(i.b)("p",null,"This will prompt the user to allow signing the custom transaction"),Object(i.b)("img",{src:"/img/marina_spend.png",alt:"Marina Spend",width:"300"}),Object(i.b)("p",null,"If the prompt is accepted, will be possible to retrieve the signed base64 transaction"))}l.isMDXComponent=!0},90:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return m}));var a=t(0),r=t.n(a);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var d=r.a.createContext({}),l=function(e){var n=r.a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=l(e.components);return r.a.createElement(d.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},b=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),p=l(t),b=a,m=p["".concat(o,".").concat(b)]||p[b]||u[b]||i;return t?r.a.createElement(m,s(s({ref:n},d),{},{components:t})):r.a.createElement(m,s({ref:n},d))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=b;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var d=2;d<i;d++)o[d]=t[d];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"}}]);