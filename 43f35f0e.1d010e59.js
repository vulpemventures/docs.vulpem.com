(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{77:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return c})),a.d(t,"metadata",(function(){return s})),a.d(t,"toc",(function(){return l})),a.d(t,"default",(function(){return o}));var n=a(3),r=a(7),i=(a(0),a(90)),c={id:"api",title:"API reference",image:"/img/marina_logo.svg"},s={unversionedId:"marina/api",id:"marina/api",isDocsHomePage:!1,title:"API reference",description:"We recommend that all web developers read from the Getting started section and onward .",source:"@site/docs/marina/api.md",slug:"/marina/api",permalink:"/marina/api",editUrl:"https://github.com/vulpemventures/docs.vulpem.com/edit/master/docs/docs/marina/api.md",version:"current",sidebar:"docs",previous:{title:"Transaction",permalink:"/marina/transaction"},next:{title:"Ionio Account",permalink:"/marina/ionio-example"}},l=[{value:"Basics",id:"basics",children:[]},{value:"API",id:"api",children:[{value:"MarinaProvider",id:"marinaprovider",children:[]},{value:"Utils",id:"utils",children:[]},{value:"createAccount",id:"createaccount",children:[]},{value:"getAccountInfo",id:"getaccountinfo",children:[]},{value:"useAccount",id:"useaccount",children:[]},{value:"isEnabled",id:"isenabled",children:[]},{value:"isReady",id:"isready",children:[]},{value:"enable",id:"enable",children:[]},{value:"disable",id:"disable",children:[]},{value:"getNetwork",id:"getnetwork",children:[]},{value:"getAddresses",id:"getaddresses",children:[]},{value:"getNextAddress",id:"getnextaddress",children:[]},{value:"getNextChangeAddress",id:"getnextchangeaddress",children:[]},{value:"sendTransaction",id:"sendtransaction",children:[]},{value:"blindTransaction",id:"blindtransaction",children:[]},{value:"signTransaction",id:"signtransaction",children:[]},{value:"signMessage",id:"signmessage",children:[]},{value:"getCoins",id:"getcoins",children:[]},{value:"getTransactions",id:"gettransactions",children:[]},{value:"getBalances",id:"getbalances",children:[]},{value:"getFeeAssets",id:"getfeeassets",children:[]},{value:"on",id:"on",children:[]},{value:"off",id:"off",children:[]}]},{value:"Marina events",id:"marina-events",children:[{value:"NEW_UTXO",id:"new_utxo",children:[]},{value:"SPENT_UTXO",id:"spent_utxo",children:[]},{value:"NEW_TX",id:"new_tx",children:[]},{value:"ENABLED",id:"enabled",children:[]},{value:"DISABLED",id:"disabled",children:[]},{value:"NETWORK",id:"network",children:[]}]},{value:"Utils",id:"utils-1",children:[{value:"detectProvider",id:"detectprovider",children:[]}]},{value:"TypeScript specification",id:"typescript-specification",children:[]}],b={toc:l};function o(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},b,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(i.b)("div",{parentName:"div",className:"admonition-heading"},Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",{parentName:"h5",className:"admonition-icon"},Object(i.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(i.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),Object(i.b)("div",{parentName:"div",className:"admonition-content"},Object(i.b)("p",{parentName:"div"},"We recommend that all web developers read from the ",Object(i.b)("a",{parentName:"p",href:"getting-started"},"Getting started")," section and onward ."))),Object(i.b)("p",null,"Marina injects a global API into websites visited by its users at window.marina. This API allows websites to request users' Liquid addresses and blinding keys, read data about the blockchain the user is connected to, and suggest that the user sign messages and send transactions."),Object(i.b)("p",null,"The ",Object(i.b)("a",{parentName:"p",href:"https://www.npmjs.com/package/marina-provider"},"marina-provider")," package provides a function ",Object(i.b)("inlineCode",{parentName:"p"},"detectProvider")," to inspect and fetch the ",Object(i.b)("inlineCode",{parentName:"p"},"window.marina")," provider."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-javascript"},"import { detectProvider } from 'marina-provider';\n\ntry {\n  const marina = await detectProvider('marina');\n  initApp(marina); // initialize your app\n} catch (err) {\n  console.log('Please install Marina extension!');\n}\n")),Object(i.b)("h2",{id:"basics"},"Basics"),Object(i.b)("p",null,"For any non-trivial Liquid-powered web application to work, you will have to:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Detect if Marina provider is installed"),Object(i.b)("li",{parentName:"ul"},"If the first time for the user, ask permissions to connect using ",Object(i.b)("inlineCode",{parentName:"li"},"marina.enable()")),Object(i.b)("li",{parentName:"ul"},"Detect which network the user is connected to (either ",Object(i.b)("inlineCode",{parentName:"li"},"liquid")," or ",Object(i.b)("inlineCode",{parentName:"li"},"regtest"),") using ",Object(i.b)("inlineCode",{parentName:"li"},"marina.getNetwork()")),Object(i.b)("li",{parentName:"ul"},"Get the user's Liquid addresses(s) and blinding keys using ",Object(i.b)("inlineCode",{parentName:"li"},"marina.getNextAddress()"))),Object(i.b)("p",null,"The snippet at the top of this page is sufficient for detecting the provider."),Object(i.b)("p",null,"The provider API is all you need to create a full-featured Liquid powered web application."),Object(i.b)("h2",{id:"api"},"API"),Object(i.b)("h3",{id:"marinaprovider"},"MarinaProvider"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#isenabled"},"isEnabled")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#isready"},"isReady")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#getaccountinfo"},"getAccountInfo")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#useaccount"},"useAccount")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#createaccount"},"createAccount")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#enable"},"enable")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#disable"},"disable")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#getnetwork"},"getNetwork")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#getaddresses"},"getAddresses")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#getnextaddress"},"getNextAddress")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#getnextchangeaddress"},"getNextChangeAddress")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#sendtransaction"},"sendTransaction")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#blindtransaction"},"blindTransaction")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#signtransaction"},"signTransaction")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#signmessage"},"signMessage")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#gettransactions"},"getTransactions")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#getcoins"},"getCoins")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#getbalances"},"getBalances")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#getfeeassets"},"getFeeAssets")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#on"},"on")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#off"},"off"))),Object(i.b)("h3",{id:"utils"},"Utils"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#detectprovider"},"detectProvider"))),Object(i.b)("h3",{id:"createaccount"},"createAccount"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"marina.createAccount(accountID: AccountID, accountType: AccountType): Promise<void>;\n")),Object(i.b)("p",null,"Open a popup, ask the password locking the marina private key.\nIf the user accepts, marina will create a new account."),Object(i.b)("p",null,"Account types are:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"AccountType.P2WPKH"),": native segwit v0 account (default)"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"AccountType.Ionio"),": account using ",Object(i.b)("a",{parentName:"li",href:"https://ionio-lang.org/"},"Ionio")," artifacts to generate taproot scripts.")),Object(i.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(i.b)("div",{parentName:"div",className:"admonition-heading"},Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",{parentName:"h5",className:"admonition-icon"},Object(i.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(i.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),Object(i.b)("div",{parentName:"div",className:"admonition-content"},Object(i.b)("p",{parentName:"div"},"All accounts are ",Object(i.b)("em",{parentName:"p"},"confidential")," and generate blinding keys for each script according to ",Object(i.b)("a",{parentName:"p",href:"https://github.com/satoshilabs/slips/blob/master/slip-0077.md"},"SLIP77"),"."))),Object(i.b)("h3",{id:"getaccountinfo"},"getAccountInfo"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"marina.getAccountInfo(accountID: AccountID): Promise<AccountInfo>;\n")),Object(i.b)("p",null,"Get the account info of the account ",Object(i.b)("inlineCode",{parentName:"p"},"accountID")," if it exists. Returns an error otherwise."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"export interface AccountInfo {\n  accountID: AccountID;\n  type: AccountType; \n  masterXPub: string;\n  baseDerivationPath: string; // path to masterXPub\n  accountNetworks: NetworkString[]; // the account is available on these networks\n}\n")),Object(i.b)("h3",{id:"useaccount"},"useAccount"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"marina.useAccount(accountID: AccountID): Promise<void>;\n")),Object(i.b)("p",null,"Switch to account with ID = ",Object(i.b)("inlineCode",{parentName:"p"},"accountID"),' if it exists. By default, current selected account is always "mainAccount".'),Object(i.b)("h3",{id:"isenabled"},"isEnabled"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"marina.isEnabled(): Promise<boolean>\n")),Object(i.b)("p",null,"Returns whether the user has already granted permission to the website to access their wallet.\nIf this returns false, some methods will throw an error."),Object(i.b)("h3",{id:"isready"},"isReady"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"marina.isReady(): Promise<boolean>\n")),Object(i.b)("p",null,"Returns whether the user has already set up a wallet."),Object(i.b)("h3",{id:"enable"},"enable"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"marina.enable(): Promise<void>\n")),Object(i.b)("p",null,"Ask the user to grant permissions to the website to access his wallet. It will open a popup and wait for the user's response."),Object(i.b)("h3",{id:"disable"},"disable"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"marina.disable(): Promise<void>\n")),Object(i.b)("p",null,"Deny the website to access the user's wallet. It does not open any popup and does not need user interaction."),Object(i.b)("h3",{id:"getnetwork"},"getNetwork"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"marina.getNetwork(): Promise<'liquid' | 'testnet' | 'regtest'>\n")),Object(i.b)("p",null,"Returns the network to which the wallet is connected."),Object(i.b)("h3",{id:"getaddresses"},"getAddresses"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"marina.getAddresses(accountIDs?: AccountID[]): Promise<Address[]>\n")),Object(i.b)("p",null,"Returns the addresses of the accounts selected by ",Object(i.b)("inlineCode",{parentName:"p"},"accountIDs"),". If undefined, returns the addresses of all accounts."),Object(i.b)("h3",{id:"getnextaddress"},"getNextAddress"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"marina.getNextAddress(ionioData?: ArtifactWithConstructorArgs): Promise<AddressInterface>\n")),Object(i.b)("p",null,"Generate and persist in Marina a new external address for the current selected account.\n",Object(i.b)("inlineCode",{parentName:"p"},"ionioData")," is expected if the current selected account is an Ionio account."),Object(i.b)("h3",{id:"getnextchangeaddress"},"getNextChangeAddress"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"marina.getNextChangeAddress(ionioData?: ArtifactWithConstructorArgs): Promise<AddressInterface>\n")),Object(i.b)("p",null,"Generate and persist in Marina a new internal address for the current selected account.\n",Object(i.b)("inlineCode",{parentName:"p"},"ionioData")," is expected if the current selected account is an Ionio account."),Object(i.b)("h3",{id:"sendtransaction"},"sendTransaction"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"marina.sendTransaction(recipients: Recipient[], feeAssetHash?: string): Promise<SentTransaction>\n")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"feeAssetHash")," is an optional parameter. The default value is the network's L-BTC asset hash.\nIf another asset hash is specified, Marina will use Liquid Taxi to pay fees. ",Object(i.b)("a",{parentName:"p",href:"#getFeeAssets"},"getFeeAssets")," lets to know the assets supported as ",Object(i.b)("inlineCode",{parentName:"p"},"feeAssetHash"),"."),Object(i.b)("h3",{id:"blindtransaction"},"blindTransaction"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"marina.blindTransaction(pset: PsetBase64): Promise<PsetBase64>;\n")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"blindTransaction is not implemented yet.")),Object(i.b)("h3",{id:"signtransaction"},"signTransaction"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"marina.signTransaction(pset: PsetBase64): Promise<PsetBase64>;\n")),Object(i.b)("p",null,"Marina will try to sign all the inputs of the transaction if it knows the blinding and signing keys of the spent outpoint."),Object(i.b)("h3",{id:"signmessage"},"signMessage"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"marina.signMessage(message: string): Promise<SignedMessage>;\n")),Object(i.b)("p",null,"Sign a message using the private key of the current selected account."),Object(i.b)("h3",{id:"getcoins"},"getCoins"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"marina.getCoins(accountIDs?: AccountID[]): Promise<Utxo[]>;\n")),Object(i.b)("p",null,"Returns the UTXOs of the accounts selected by ",Object(i.b)("inlineCode",{parentName:"p"},"accountIDs"),". If undefined, returns the UTXOs of all accounts.\n",Object(i.b)("inlineCode",{parentName:"p"},"Utxo")," contains all the data to spend the input (",Object(i.b)("inlineCode",{parentName:"p"},"witnessUtxo"),", ",Object(i.b)("inlineCode",{parentName:"p"},"blindingData")," and ",Object(i.b)("inlineCode",{parentName:"p"},"scriptDetails"),")."),Object(i.b)("h3",{id:"gettransactions"},"getTransactions"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"marina.getTransactions(accountIDs?: AccountID[]): Promise<Transaction[]>;\n")),Object(i.b)("p",null,"Returns the transactions of the accounts selected by ",Object(i.b)("inlineCode",{parentName:"p"},"accountIDs"),". If undefined, returns the transactions of all accounts."),Object(i.b)("h3",{id:"getbalances"},"getBalances"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"marina.getBalances(accountIDs?: AccountID[]): Promise<Balance[]>;\n")),Object(i.b)("p",null,"Returns the balances of the accounts selected by ",Object(i.b)("inlineCode",{parentName:"p"},"accountIDs"),". If undefined, returns the balances of all accounts."),Object(i.b)("h3",{id:"getfeeassets"},"getFeeAssets"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"marina.getFeeAssets(): Promise<string[]>;\n")),Object(i.b)("p",null,"Returns the list of assets that can be used to pay transaction fees."),Object(i.b)("h3",{id:"on"},"on"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"marina.on(type: MarinaEventType, callback: (payload: any) => void): EventListenerID;\n")),Object(i.b)("p",null,"Returns a ",Object(i.b)("inlineCode",{parentName:"p"},"string")," unique ID using to identity the listener."),Object(i.b)("h3",{id:"off"},"off"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"marina.off(listenerId: EventListenerID): void;\n")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"off")," stops the listener identified by ",Object(i.b)("inlineCode",{parentName:"p"},"listenerId"),"."),Object(i.b)("h2",{id:"marina-events"},"Marina events"),Object(i.b)("p",null,"Marina emits events when the wallet state changes. The user can capture these events using ",Object(i.b)("inlineCode",{parentName:"p"},"marina.on"),", and cancel the listeners with ",Object(i.b)("inlineCode",{parentName:"p"},"marina.off"),"."),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"The callback's payload 'data' prop depends on event type:")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"interface MarinaEvent {\n  accountID?: string;\n  data: any;\n}\n")),Object(i.b)("h3",{id:"new_utxo"},"NEW_UTXO"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"NEW_UTXO")," is emitted when Marina fetches a new unspent output from explorer."),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Event type"),Object(i.b)("th",{parentName:"tr",align:null},"Payload type"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},'"NEW_UTXO"'),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"{ accountID: string; data: UnblindedOutput }"))))),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},'marina.on("NEW_UTXO", ({ accountID, data }: MarinaEvent) => {\n  const { txid, vout } = data;\n  console.log(`new utxo ${txid}:${vout} for account ${accountID}`);\n})\n')),Object(i.b)("h3",{id:"spent_utxo"},"SPENT_UTXO"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"SPENT_UTXO")," is emitted when an unspent output has been spent by any transaction."),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Event type"),Object(i.b)("th",{parentName:"tr",align:null},"Payload type"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},'"SPENT_UTXO"'),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"{ accountID: string; data: UnblindedOutput }"))))),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},'marina.on("SPENT_UTXO", ({ accountID, data }: MarinaEvent) => {\n  const { txid, vout } = data;\n  console.log(`output ${txid}:${vout} has been spent by account ${accountID}`);\n})\n')),Object(i.b)("h3",{id:"new_tx"},"NEW_TX"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"NEW_TX")," is emitted when Marina fetches a transaction from explorer."),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Event type"),Object(i.b)("th",{parentName:"tr",align:null},"Payload type"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},'"NEW_TX"'),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"{\xa0accountID: string; data: Transaction }"))))),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},'// print the tx\'s txid each time Marina emits NEW_TX\nmarina.on("NEW_TX", ({ accountID, data }: MarinaEvent) => {\n  const {\xa0txId } = data;\n  console.log(`new tx ${txId} for account ${accountID}`);\n})\n')),Object(i.b)("h3",{id:"enabled"},"ENABLED"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"ENABLED")," is emitted when the active hostname is enabled by the user."),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Event type"),Object(i.b)("th",{parentName:"tr",align:null},"Payload type"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},'"ENABLED"'),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"{ data: { hostname: string; network: NetworkString } }"))))),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},'marina.enable(); // this will open the enable popup. the user can accept or reject.\nmarina.on("ENABLED", () => console.log("the user has accepted"));\n')),Object(i.b)("h3",{id:"disabled"},"DISABLED"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"DISABLED")," is emitted when the active hostname is disabled by the user."),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Event type"),Object(i.b)("th",{parentName:"tr",align:null},"Payload type"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},'"DISABLED"'),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"{ data: { hostname: string; network: NetworkString } }"))))),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},'marina.disable(); // this will emit a "DISABLED" event.\nmarina.on("DISABLED", () => console.log("the current hostname is now disabled"));\n')),Object(i.b)("h3",{id:"network"},"NETWORK"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"NETWORK")," event is emitted when the Marina's network config has changed."),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Event type"),Object(i.b)("th",{parentName:"tr",align:null},"Payload type"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},'"NETWORK"'),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"{ data: NetworkString }")," (network name)")))),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},'marina.on("NETWORK", ({ data }: MarinaEvent) => {\n  if (data === "regtest") {\n    // the user has switched from "liquid" to "regtest".\n    console.log("regtest is boring");\n  }\n});\n')),Object(i.b)("h2",{id:"utils-1"},"Utils"),Object(i.b)("h3",{id:"detectprovider"},"detectProvider"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"detectProvider")," function aims to fetch the providers injected by the browser extension."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"const myProvider = await detectProvider<ProviderType>('providerName', 10000);\nconst marina = await detectProvider<MarinaProvider>('marina'); // default timeout = 3000\n")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Under the hood, the function listens the ",Object(i.b)("inlineCode",{parentName:"p"},"providerName#initialized")," event emitted by the browser extension script.")),Object(i.b)("h2",{id:"typescript-specification"},"TypeScript specification"),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"MarinaProvider")," : ",Object(i.b)("a",{parentName:"p",href:"https://github.com/vulpemventures/marina-provider/blob/master/src/index.ts"},"https://github.com/vulpemventures/marina-provider/blob/master/src/index.ts")))}o.isMDXComponent=!0},90:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return m}));var n=a(0),r=a.n(n);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function c(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?c(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):c(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var b=r.a.createContext({}),o=function(e){var t=r.a.useContext(b),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},p=function(e){var t=o(e.components);return r.a.createElement(b.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,c=e.parentName,b=l(e,["components","mdxType","originalType","parentName"]),p=o(a),u=n,m=p["".concat(c,".").concat(u)]||p[u]||d[u]||i;return a?r.a.createElement(m,s(s({ref:t},b),{},{components:a})):r.a.createElement(m,s({ref:t},b))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,c=new Array(i);c[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,c[1]=s;for(var b=2;b<i;b++)c[b]=a[b];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,a)}u.displayName="MDXCreateElement"}}]);